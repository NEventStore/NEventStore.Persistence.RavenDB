<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AttemptingToCommit" xml:space="preserve">
    <value>Attempting to commit {0} events on stream '{1}' at sequence {2} to bucket '{3}'</value>
  </data>
  <data name="GettingAllCommitsBetween" xml:space="preserve">
    <value>Getting all commits for stream '{0}' in bucket '{1}' between revisions '{2}' and '{3}'.</value>
  </data>
  <data name="GettingAllCommitsFrom" xml:space="preserve">
    <value>Getting all commits from bucket from '{0}' in bucket '{1}' forward.</value>
  </data>
  <data name="InitializingStorage" xml:space="preserve">
    <value>Initializing storage engine.</value>
  </data>
  <data name="ShuttingDownPersistence" xml:space="preserve">
    <value>Shutting down persistence.</value>
  </data>
  <data name="CommitPersisted" xml:space="preserve">
    <value>Commit '{0}' persisted in bucket '{1}'.</value>
  </data>
  <data name="ConcurrentWriteDetected" xml:space="preserve">
    <value>Concurrent write detected.</value>
  </data>
  <data name="DetectingConcurrency" xml:space="preserve">
    <value>Concurrency issue; determining whether attempt was duplicate.</value>
  </data>
  <data name="AddingSnapshot" xml:space="preserve">
    <value>Adding snapshot to stream '{0}' at position {1} to bucket '{2}'</value>
  </data>
  <data name="GettingRevision" xml:space="preserve">
    <value>Getting snapshot for stream '{0}' on or before revision {1}.</value>
  </data>
  <data name="GettingStreamsToSnapshot" xml:space="preserve">
    <value>Getting a list of streams to snapshot from bucket '{0}'.</value>
  </data>
  <data name="GettingUndispatchedCommits" xml:space="preserve">
    <value>Getting the list of all undispatched commits.</value>
  </data>
  <data name="MarkingCommitAsDispatched" xml:space="preserve">
    <value>Marking commit '{0}' in bucket '{1}' as dispatched.</value>
  </data>
  <data name="PurgingStorage" xml:space="preserve">
    <value>Purging all stored data.</value>
  </data>
  <data name="SerializerCannotBeNull" xml:space="preserve">
    <value>Serializer cannot be null.</value>
  </data>
  <data name="PagingSizeTooSmall" xml:space="preserve">
    <value>Configured paging size is too small.</value>
  </data>
  <data name="StorageThrewException" xml:space="preserve">
    <value>Storage threw exception of type '{0}'.</value>
  </data>
  <data name="StorageUnavailable" xml:space="preserve">
    <value>Storage is unavailabe.</value>
  </data>
  <data name="DuplicateCommitDetected" xml:space="preserve">
    <value>Duplicate commit detected.</value>
  </data>
  <data name="StorageAlreadyDisposed" xml:space="preserve">
    <value>Storage has already been disposed.</value>
  </data>
  <data name="EnumeratedRowCount" xml:space="preserve">
    <value>Enumerated {0} rows, re-querying for next page.</value>
  </data>
  <data name="ScopeCompleted" xml:space="preserve">
    <value>Scope is complete.</value>
  </data>
  <data name="GettingAllCommitsFromTo" xml:space="preserve">
    <value>Getting all commits from '{0}' to '{1}' in bucket '{2}'.</value>
  </data>
  <data name="PurgingBucket" xml:space="preserve">
    <value>Purging all stored data for bucket '{0}'.</value>
  </data>
  <data name="DeletingStream" xml:space="preserve">
    <value>Deleting stream '{0}' from bucket '{1}'.</value>
  </data>
  <data name="GettingAllCommitsFromCheckpoint" xml:space="preserve">
    <value>Getting all commits from checkpoint '{0}'.</value>
  </data>
  <data name="ConfiguringEngine" xml:space="preserve">
    <value>Configuring Raven persistence engine.</value>
  </data>
  <data name="GettingAllCommitsFromBucketAndCheckpoint" xml:space="preserve">
    <value>Getting all commits from Bucket '{0}' and checkpoint '{1}'.</value>
  </data>
</root>